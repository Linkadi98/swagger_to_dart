{
  "openapi": "3.1.0",
  "info": {
    "title": "FastAPI Type Examples",
    "description": "Comprehensive examples of types and routes in FastAPI",
    "version": "1.0.0"
  },
  "paths": {
    "/basic/number/{num}": {
      "get": {
        "tags": [
          "basic"
        ],
        "summary": "Handle integer path parameter",
        "description": "Handle integer path parameter.",
        "operationId": "basic-basic_number",
        "parameters": [
          {
            "name": "num",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Num"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Basic-Basic Number"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/basic/float/{num}": {
      "get": {
        "tags": [
          "basic"
        ],
        "summary": "Handle float path parameter",
        "description": "Handle float path parameter.",
        "operationId": "basic-basic_float",
        "parameters": [
          {
            "name": "num",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number",
              "title": "Num"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Basic-Basic Float"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/basic/boolean": {
      "get": {
        "tags": [
          "basic"
        ],
        "summary": "Handle boolean query parameter",
        "description": "Handle boolean query parameter with default value.",
        "operationId": "basic-basic_boolean",
        "parameters": [
          {
            "name": "flag",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Flag"
            },
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Basic-Basic Boolean"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/basic/string": {
      "get": {
        "tags": [
          "basic"
        ],
        "summary": "Handle string query parameter",
        "description": "Handle string query parameter with validation.",
        "operationId": "basic-basic_string",
        "parameters": [
          {
            "name": "text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 3,
              "maxLength": 50,
              "title": "Text"
            },
            "example": "example_text"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Basic-Basic String"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/datetime/date": {
      "get": {
        "tags": [
          "basic"
        ],
        "summary": "Handle date parameters",
        "description": "Handle date parameter (YYYY-MM-DD).",
        "operationId": "basic-datetime_date",
        "parameters": [
          {
            "name": "d",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "title": "D"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Basic-Datetime Date"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/datetime/datetime": {
      "get": {
        "tags": [
          "basic"
        ],
        "summary": "Handle datetime parameters",
        "description": "Handle datetime parameter (YYYY-MM-DDThh:mm:ss).",
        "operationId": "basic-datetime_datetime",
        "parameters": [
          {
            "name": "dt",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Dt"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Basic-Datetime Datetime"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/datetime/time": {
      "get": {
        "tags": [
          "basic"
        ],
        "summary": "Handle time parameters",
        "description": "Handle time parameter (hh:mm:ss).",
        "operationId": "basic-datetime_time",
        "parameters": [
          {
            "name": "t",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "time",
              "title": "T"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Basic-Datetime Time"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/datetime/timedelta": {
      "get": {
        "tags": [
          "basic"
        ],
        "summary": "Handle timedelta parameters",
        "description": "Handle timedelta parameter (in seconds).",
        "operationId": "basic-datetime_timedelta",
        "parameters": [
          {
            "name": "td",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "duration",
              "title": "Td"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Basic-Datetime Timedelta"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/special/uuid": {
      "get": {
        "tags": [
          "advanced"
        ],
        "summary": "Handle UUID parameters",
        "description": "Handle UUID parameter.",
        "operationId": "advanced-special_uuid",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Advanced-Special Uuid"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/special/enum": {
      "get": {
        "tags": [
          "advanced"
        ],
        "summary": "Handle enum parameters",
        "description": "Handle Enum parameter.",
        "operationId": "advanced-special_enum",
        "parameters": [
          {
            "name": "level",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/UserLevel",
              "default": "basic"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Advanced-Special Enum"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/special/literal": {
      "get": {
        "tags": [
          "advanced"
        ],
        "summary": "Handle literal type parameters",
        "description": "Handle Literal type parameter.",
        "operationId": "advanced-special_literal",
        "parameters": [
          {
            "name": "mode",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "light",
                "dark",
                "system"
              ],
              "type": "string",
              "default": "system",
              "title": "Mode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Advanced-Special Literal"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/collection/list": {
      "get": {
        "tags": [
          "advanced"
        ],
        "summary": "Collection List",
        "description": "Handle list of strings query parameter.",
        "operationId": "advanced-collection_list",
        "parameters": [
          {
            "name": "items",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "default"
              ],
              "title": "Items"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Advanced-Collection List"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/collection/set": {
      "get": {
        "tags": [
          "advanced"
        ],
        "summary": "Collection Set",
        "description": "Handle set of integers query parameter.",
        "operationId": "advanced-collection_set",
        "parameters": [
          {
            "name": "items",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "integer"
              },
              "default": [
                1,
                2,
                3
              ],
              "title": "Items"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Advanced-Collection Set"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/collection/dict": {
      "get": {
        "tags": [
          "advanced"
        ],
        "summary": "Collection Dict",
        "description": "Handle dictionary in request body.",
        "operationId": "advanced-collection_dict",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Advanced-Collection Dict"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/collection/tuple": {
      "get": {
        "tags": [
          "advanced"
        ],
        "summary": "Collection Tuple",
        "description": "Handle fixed-size tuple query parameter.",
        "operationId": "advanced-collection_tuple",
        "parameters": [
          {
            "name": "items",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "prefixItems": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "boolean"
                }
              ],
              "minItems": 3,
              "maxItems": 3,
              "title": "Items"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Advanced-Collection Tuple"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/collection/variable_tuple": {
      "get": {
        "tags": [
          "advanced"
        ],
        "summary": "Collection Variable Tuple",
        "description": "Handle variable-size tuple query parameter.",
        "operationId": "advanced-collection_variable_tuple",
        "parameters": [
          {
            "name": "items",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Items"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Advanced-Collection Variable Tuple"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/union/simple": {
      "get": {
        "tags": [
          "advanced"
        ],
        "summary": "Handle union type parameters",
        "description": "Handle union type parameter.",
        "operationId": "advanced-union_simple",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "boolean"
                }
              ],
              "title": "Value"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Advanced-Union Simple"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/union/optional": {
      "get": {
        "tags": [
          "advanced"
        ],
        "summary": "Handle optional parameters",
        "description": "Handle optional type parameter.",
        "operationId": "advanced-union_optional",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Value"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Advanced-Union Optional"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/union/modern": {
      "get": {
        "tags": [
          "advanced"
        ],
        "summary": "Handle union with modern Python syntax",
        "description": "Handle union with modern Python syntax (Python 3.10+).",
        "operationId": "advanced-union_modern",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Value"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Advanced-Union Modern"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/models/user": {
      "post": {
        "tags": [
          "models"
        ],
        "summary": "Create a new user",
        "description": "Create a new user from a Pydantic model.",
        "operationId": "models-create_user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/models/location": {
      "get": {
        "tags": [
          "models"
        ],
        "summary": "Process location information",
        "description": "Handle a Pydantic model as query parameters.",
        "operationId": "models-get_location",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Location"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Models-Get Location"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/models/animal": {
      "post": {
        "tags": [
          "models"
        ],
        "summary": "Create an animal based on type discriminator",
        "description": "Handle discriminated union of Pydantic models.",
        "operationId": "models-create_animal",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Dog"
                  },
                  {
                    "$ref": "#/components/schemas/Cat"
                  },
                  {
                    "$ref": "#/components/schemas/Parrot"
                  }
                ],
                "title": "Animal",
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "dog": "#/components/schemas/Dog",
                    "cat": "#/components/schemas/Cat",
                    "parrot": "#/components/schemas/Parrot"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Models-Create Animal"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/params/path/{item_id}": {
      "get": {
        "tags": [
          "validation"
        ],
        "summary": "Demonstrate path parameter validation",
        "description": "Path parameter with validation.",
        "operationId": "validation-param_path",
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "Item ID",
              "description": "The ID of the item"
            },
            "description": "The ID of the item",
            "example": 42
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Validation-Param Path"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/params/query": {
      "get": {
        "tags": [
          "validation"
        ],
        "summary": "Demonstrate query parameter validation",
        "description": "Query parameters with validation.",
        "operationId": "validation-param_query",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 3,
                  "maxLength": 50,
                  "pattern": "^[a-zA-Z0-9_-]+$"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search query string (alphanumeric with hyphens and underscores)",
              "title": "Q"
            },
            "description": "Search query string (alphanumeric with hyphens and underscores)",
            "example": "search-term"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of items to skip",
              "default": 0,
              "title": "Skip"
            },
            "description": "Number of items to skip",
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Maximum number of items to return (1-100)",
              "default": 10,
              "title": "Limit"
            },
            "description": "Maximum number of items to return (1-100)",
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Validation-Param Query"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/params/body": {
      "post": {
        "tags": [
          "validation"
        ],
        "summary": "Demonstrate body parameter validation",
        "description": "Body parameters with validation.",
        "operationId": "validation-param_body",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_validation-param_body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Validation-Param Body"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/params/cookie": {
      "get": {
        "tags": [
          "validation"
        ],
        "summary": "Param Cookie",
        "description": "Cookie parameters.",
        "operationId": "validation-param_cookie",
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          },
          {
            "name": "preferences",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Preferences"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Validation-Param Cookie"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/params/header": {
      "get": {
        "tags": [
          "validation"
        ],
        "summary": "Param Header",
        "description": "Header parameters.",
        "operationId": "validation-param_header",
        "parameters": [
          {
            "name": "user-agent",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User-Agent"
            }
          },
          {
            "name": "x-token",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Validation-Param Header"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/forms/basic": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Handle basic form data",
        "description": "Handle form data.",
        "operationId": "files-form_basic",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_files-form_basic"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Files-Form Basic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/files/upload": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Handle single file upload",
        "description": "Handle file upload.",
        "operationId": "files-file_upload",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_files-file_upload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Files-File Upload"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/files/multiple": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Handle multiple file uploads",
        "description": "Handle multiple file uploads.",
        "operationId": "files-files_multiple",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_files-files_multiple"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Files-Files Multiple"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/validation/complex": {
      "post": {
        "tags": [
          "validation"
        ],
        "summary": "Demonstrate complex model validation",
        "description": "Process a model with complex validation rules.",
        "operationId": "validation-validation_complex",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AllTypesWithValidation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllTypesWithValidation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/validation/conditional": {
      "get": {
        "tags": [
          "validation"
        ],
        "summary": "Demonstrate conditional validation",
        "description": "Validate that at least one parameter is provided.",
        "operationId": "validation-validation_conditional",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "description": "User ID",
              "title": "User Id"
            },
            "description": "User ID",
            "example": 123
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 3
                },
                {
                  "type": "null"
                }
              ],
              "description": "Username",
              "title": "Username"
            },
            "description": "Username",
            "example": "johndoe"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Validation-Validation Conditional"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/validation/conditional_body": {
      "post": {
        "tags": [
          "validation"
        ],
        "summary": "Validate a model with conditional requirements",
        "description": "Validate a body with conditional validation.",
        "operationId": "validation-validation_conditional_body",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConditionalBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConditionalBody"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/custom/positive_int": {
      "get": {
        "tags": [
          "advanced"
        ],
        "summary": "Demonstrate custom type validation",
        "description": "Handle custom type for positive integers.",
        "operationId": "advanced-custom_positive_int",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Value"
            }
          },
          {
            "name": "value2",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMaximum": 0,
              "title": "Value2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Advanced-Custom Positive Int"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/constrained/int": {
      "get": {
        "tags": [
          "validation"
        ],
        "summary": "Demonstrate constrained integer validation",
        "description": "Handle constrained integer with validation.",
        "operationId": "validation-constrained_int",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMaximum": 100,
              "description": "Integer between 0 and 99",
              "title": "Value"
            },
            "description": "Integer between 0 and 99",
            "example": 42
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Validation-Constrained Int"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/constrained/float": {
      "get": {
        "tags": [
          "validation"
        ],
        "summary": "Demonstrate constrained float validation",
        "description": "Handle constrained float with validation.",
        "operationId": "validation-constrained_float",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "maximum": 1.0,
              "minimum": 0.0,
              "description": "Float between 0.0 and 1.0",
              "title": "Value"
            },
            "description": "Float between 0.0 and 1.0",
            "example": 0.5
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Validation-Constrained Float"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/constrained/string": {
      "get": {
        "tags": [
          "validation"
        ],
        "summary": "Demonstrate constrained string validation",
        "description": "Handle constrained string with validation.",
        "operationId": "validation-constrained_string",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 3,
              "maxLength": 50,
              "pattern": "^[a-zA-Z0-9_-]+$",
              "description": "String between 3-50 chars, alphanumeric with hyphens and underscores",
              "title": "Value"
            },
            "description": "String between 3-50 chars, alphanumeric with hyphens and underscores",
            "example": "example-value"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Validation-Constrained String"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/response/filtered": {
      "get": {
        "tags": [
          "models"
        ],
        "summary": "Return a filtered response model",
        "description": "Return a response filtered by the response_model.",
        "operationId": "models-response_filtered",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBase"
                }
              }
            }
          }
        }
      }
    },
    "/response/multiple": {
      "get": {
        "tags": [
          "models"
        ],
        "summary": "Return different response models based on query",
        "description": "Return different response models based on query parameters.",
        "operationId": "models-response_multiple",
        "parameters": [
          {
            "name": "is_user",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether to return a user or location",
              "default": true,
              "title": "Is User"
            },
            "description": "Whether to return a user or location",
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/User"
                    },
                    {
                      "$ref": "#/components/schemas/Location"
                    }
                  ],
                  "title": "Response Models-Response Multiple"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/response/list": {
      "get": {
        "tags": [
          "models"
        ],
        "summary": "Return a list of models",
        "description": "Return a list of items with a response model.",
        "operationId": "models-response_list",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/User"
                  },
                  "type": "array",
                  "title": "Response Models-Response List"
                }
              }
            }
          }
        }
      }
    },
    "/depends/query": {
      "get": {
        "tags": [
          "advanced"
        ],
        "summary": "Use dependency injection for common parameters",
        "description": "Use dependency injection for common parameters.",
        "operationId": "advanced-depends_query",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional search string",
              "title": "Q"
            },
            "description": "Optional search string",
            "example": "search"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of items to skip",
              "default": 0,
              "title": "Skip"
            },
            "description": "Number of items to skip",
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Max items to return",
              "default": 100,
              "title": "Limit"
            },
            "description": "Max items to return",
            "example": 100
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Advanced-Depends Query"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/depends/class": {
      "get": {
        "tags": [
          "advanced"
        ],
        "summary": "Use class-based dependency injection",
        "description": "Use class-based dependency injection.",
        "operationId": "advanced-depends_class",
        "parameters": [
          {
            "name": "db_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "default",
              "title": "Db Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Advanced-Depends Class"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/token": {
      "post": {
        "tags": [
          "security"
        ],
        "summary": "Get an access token",
        "description": "OAuth2 compatible token login, get an access token for future requests.",
        "operationId": "security-login",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_security-login"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Security-Login"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "security"
        ],
        "summary": "Get current user from token",
        "description": "Get current user based on the token.",
        "operationId": "security-read_users_me",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Security-Read Users Me"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/items/secure": {
      "get": {
        "tags": [
          "security"
        ],
        "summary": "Get items using API key auth",
        "description": "Get items using API key auth.",
        "operationId": "security-get_secure_items",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  "type": "array",
                  "title": "Response Security-Get Secure Items"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/errors/not_found/{item_id}": {
      "get": {
        "tags": [
          "advanced"
        ],
        "summary": "Demonstrate 404 error handling",
        "description": "Raise an HTTP exception if the item is not found.",
        "operationId": "advanced-error_not_found",
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Item Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Advanced-Error Not Found"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/errors/custom": {
      "get": {
        "tags": [
          "advanced"
        ],
        "summary": "Demonstrate custom error status codes",
        "description": "Raise custom HTTP exceptions based on query parameters.",
        "operationId": "advanced-error_custom",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "HTTP error code to simulate",
              "title": "Code"
            },
            "description": "HTTP error code to simulate",
            "example": 400
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Advanced-Error Custom"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AllTypesWithValidation": {
        "properties": {
          "int_value": {
            "type": "integer",
            "exclusiveMaximum": 100.0,
            "exclusiveMinimum": 0.0,
            "title": "Integer Value",
            "description": "Integer between 1-99",
            "example": 42
          },
          "float_value": {
            "type": "number",
            "maximum": 10.0,
            "minimum": 0.0,
            "title": "Float Value",
            "description": "Pi or other values",
            "example": 3.14,
            "decimal_places": 2
          },
          "str_value": {
            "type": "string",
            "maxLength": 50,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Str Value",
            "description": "String with alphanumeric characters, underscores and hyphens",
            "example": "example_value"
          },
          "bool_value": {
            "type": "boolean",
            "title": "Bool Value",
            "description": "Boolean value",
            "example": true
          },
          "email_value": {
            "type": "string",
            "format": "email",
            "title": "Email Value",
            "description": "Valid email address",
            "example": "user@example.com"
          },
          "url_value": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Url Value",
            "description": "Valid HTTP URL",
            "example": "https://example.com"
          },
          "list_value": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "maxItems": 5,
            "minItems": 1,
            "title": "List Value",
            "description": "List with 1-5 strings",
            "example": [
              "item1",
              "item2"
            ]
          }
        },
        "type": "object",
        "required": [
          "int_value",
          "float_value",
          "str_value",
          "bool_value",
          "email_value",
          "url_value",
          "list_value"
        ],
        "title": "AllTypesWithValidation"
      },
      "Body_files-file_upload": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File",
            "description": "File to upload"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "File description"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_files-file_upload"
      },
      "Body_files-files_multiple": {
        "properties": {
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files",
            "description": "List of files to upload"
          },
          "notes": {
            "type": "string",
            "title": "Notes",
            "description": "Notes about the uploads"
          }
        },
        "type": "object",
        "required": [
          "files"
        ],
        "title": "Body_files-files_multiple"
      },
      "Body_files-form_basic": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username",
            "description": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "description": "Password"
          },
          "remember": {
            "type": "boolean",
            "title": "Remember",
            "description": "Remember login",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_files-form_basic"
      },
      "Body_security-login": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^password$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_security-login"
      },
      "Body_validation-param_body": {
        "properties": {
          "data": {
            "additionalProperties": true,
            "type": "object",
            "title": "Data",
            "description": "Arbitrary data object"
          },
          "importance": {
            "type": "integer",
            "maximum": 10.0,
            "minimum": 0.0,
            "title": "Importance",
            "description": "Importance level from 0-10"
          }
        },
        "type": "object",
        "required": [
          "data",
          "importance"
        ],
        "title": "Body_validation-param_body"
      },
      "Cat": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The animal's name",
            "example": "Fido"
          },
          "type": {
            "type": "string",
            "const": "cat",
            "title": "Type",
            "default": "cat",
            "example": "cat"
          },
          "meow_cuteness": {
            "type": "integer",
            "maximum": 10.0,
            "minimum": 0.0,
            "title": "Meow Cuteness Level",
            "description": "How cute the cat's meow is (0-10)",
            "example": 9
          }
        },
        "type": "object",
        "required": [
          "name",
          "meow_cuteness"
        ],
        "title": "Cat"
      },
      "ConditionalBody": {
        "properties": {
          "item_id": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Item Id",
            "description": "Item ID (if provided)",
            "example": 42
          },
          "item_name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Item Name",
            "description": "Item name (if provided)",
            "example": "example_item"
          }
        },
        "type": "object",
        "title": "ConditionalBody"
      },
      "Dog": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The animal's name",
            "example": "Fido"
          },
          "type": {
            "type": "string",
            "const": "dog",
            "title": "Type",
            "default": "dog",
            "example": "dog"
          },
          "bark_loudness": {
            "type": "integer",
            "maximum": 10.0,
            "minimum": 0.0,
            "title": "Bark Loudness",
            "description": "How loud the dog barks (0-10)",
            "example": 7
          }
        },
        "type": "object",
        "required": [
          "name",
          "bark_loudness"
        ],
        "title": "Dog"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Location": {
        "properties": {
          "lat": {
            "type": "number",
            "maximum": 90.0,
            "minimum": -90.0,
            "title": "Latitude",
            "description": "Latitude coordinate between -90 and 90 degrees",
            "example": 40.7128
          },
          "lng": {
            "type": "number",
            "maximum": 180.0,
            "minimum": -180.0,
            "title": "Longitude",
            "description": "Longitude coordinate between -180 and 180 degrees",
            "example": -74.006
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Optional location name",
            "example": "New York"
          }
        },
        "type": "object",
        "required": [
          "lat",
          "lng"
        ],
        "title": "Location"
      },
      "Parrot": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The animal's name",
            "example": "Fido"
          },
          "type": {
            "type": "string",
            "const": "parrot",
            "title": "Type",
            "default": "parrot",
            "example": "parrot"
          },
          "phrases": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Phrases",
            "description": "Phrases the parrot can say",
            "example": [
              "Hello!",
              "Polly wants a cracker"
            ]
          }
        },
        "type": "object",
        "required": [
          "name",
          "phrases"
        ],
        "title": "Parrot"
      },
      "User": {
        "properties": {
          "username": {
            "type": "string",
            "maxLength": 50,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Username",
            "description": "Username between 3-50 characters, alphanumeric with _ and -",
            "example": "johndoe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "Valid email address",
            "example": "john@example.com"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name",
            "description": "User's full name",
            "example": "John Doe"
          },
          "id": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Id",
            "description": "Unique user identifier",
            "example": 1
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "User account status",
            "default": true,
            "example": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Account creation timestamp",
            "example": "2023-01-01T00:00:00"
          },
          "location": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Location"
              },
              {
                "type": "null"
              }
            ],
            "description": "User's location information"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "List of tags associated with the user",
            "default": [],
            "example": [
              "user",
              "customer"
            ]
          }
        },
        "type": "object",
        "required": [
          "username",
          "email",
          "id"
        ],
        "title": "User"
      },
      "UserBase": {
        "properties": {
          "username": {
            "type": "string",
            "maxLength": 50,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Username",
            "description": "Username between 3-50 characters, alphanumeric with _ and -",
            "example": "johndoe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "Valid email address",
            "example": "john@example.com"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name",
            "description": "User's full name",
            "example": "John Doe"
          }
        },
        "type": "object",
        "required": [
          "username",
          "email"
        ],
        "title": "UserBase"
      },
      "UserCreate": {
        "properties": {
          "username": {
            "type": "string",
            "maxLength": 50,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Username",
            "description": "Username between 3-50 characters, alphanumeric with _ and -",
            "example": "johndoe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "Valid email address",
            "example": "john@example.com"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name",
            "description": "User's full name",
            "example": "John Doe"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "format": "password",
            "title": "Password",
            "description": "Password with minimum 8 characters",
            "writeOnly": true
          }
        },
        "type": "object",
        "required": [
          "username",
          "email",
          "password"
        ],
        "title": "UserCreate"
      },
      "UserLevel": {
        "type": "string",
        "enum": [
          "basic",
          "premium",
          "admin"
        ],
        "title": "UserLevel"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "token"
          }
        }
      },
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      }
    }
  },
  "tags": [
    {
      "name": "basic",
      "description": "Basic type operations"
    },
    {
      "name": "advanced",
      "description": "Advanced type operations"
    },
    {
      "name": "models",
      "description": "Pydantic model operations"
    },
    {
      "name": "validation",
      "description": "Parameter validation examples"
    },
    {
      "name": "files",
      "description": "File upload examples"
    },
    {
      "name": "security",
      "description": "Security related endpoints"
    }
  ]
}